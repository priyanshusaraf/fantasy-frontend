generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id                     Int                     @id @default(autoincrement())
  username               String?                 @unique
  email                  String                  @unique
  password               String?
  role                   String                  @default("USER")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  address                String?
  bio                    String?                 @db.Text
  city                   String?
  country                String?
  dateOfBirth            DateTime?
  firstName              String?
  lastName               String?
  phone                  String?
  postalCode             String?
  profilePicture         String?
  state                  String?
  status                 String                  @default("ACTIVE")
  name                   String?
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]               @relation("AccountToUser")
  bankAccount            BankAccount?
  fantasyTeams           FantasyTeam[]
  masterAdmin            MasterAdmin?
  notifications          Notification[]
  payments               Payment[]
  paymentMethods         PaymentMethod[]
  paymentSplits          PaymentSplit[]
  player                 Player?
  prizeDisbursements     PrizeDisbursement[]
  profile                Profile?
  referee                Referee?
  sessions               Session[]               @relation("SessionToUser")
  tournamentAdmin        TournamentAdmin?
  tournamentInvitations  TournamentInvitation[]
  tournamentJoinRequests TournamentJoinRequest[]
  organizedTournaments   TournamentOrganizer[]
  transactions           Transaction[]
  wallet                 Wallet?
}

model Profile {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  firstName      String    @db.VarChar(100)
  lastName       String    @db.VarChar(100)
  dateOfBirth    DateTime?
  phone          String?   @db.VarChar(20)
  address        String?   @db.Text
  city           String?   @db.VarChar(100)
  country        String?   @db.VarChar(100)
  profilePicture String?   @db.VarChar(255)
  bio            String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Player {
  id                 Int                 @id @default(autoincrement())
  userId             Int?                @unique
  name               String              @db.VarChar(100)
  imageUrl           String?
  age                Int?
  country            String?
  skillLevel         SkillLevel?
  rank               Int?
  tournamentWins     Int                 @default(0)
  careerWinRate      Float               @default(0)
  bio                String?             @db.Text
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  gender             Gender?
  fantasyTeamPlayers FantasyTeamPlayer[]
  matchesAsPlayer1   Match[]             @relation("Player1")
  matchesAsPlayer2   Match[]             @relation("Player2")
  matchPerformances  MatchPerformance[]
  user               User?               @relation(fields: [userId], references: [id])
  matchPoints        PlayerMatchPoints[]
  stats              PlayerStats[]
  tournamentEntries  TournamentEntry[]
  teamMemberships    Team[]              @relation("PlayerToTeam")
}

model Referee {
  id                  Int                  @id @default(autoincrement())
  userId              Int                  @unique
  certificationLevel  String               @db.VarChar(100)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  assignedMatches     Match[]
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  refereeJoinRequests RefereeJoinRequest[] @relation("RefereeToRefereeJoinRequests")
}

model TournamentAdmin {
  id                 Int            @id @default(autoincrement())
  userId             Int            @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  paymentSplits      PaymentSplit[]
  managedTournaments Tournament[]
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MasterAdmin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tournament {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @db.VarChar(255)
  description            String?                 @db.Text
  type                   TournamentType
  status                 TournamentStatus
  startDate              DateTime
  endDate                DateTime
  registrationOpenDate   DateTime
  registrationCloseDate  DateTime
  location               String                  @db.VarChar(255)
  imageUrl               String?                 @default("https://placehold.co/600x400?text=Tournament+Banner")
  maxParticipants        Int
  entryFee               Decimal                 @db.Decimal(10, 2)
  prizeMoney             Decimal?                @db.Decimal(10, 2)
  organizerId            Int
  rules                  String?                 @db.Text
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  fantasySettings        String?                 @db.Text
  isTeamBased            Boolean                 @default(false)
  isCompleted            Boolean                 @default(false)
  isPrizesDistributed    Boolean                 @default(false)
  prizesDistributedAt    DateTime?
  contestPrizeRules      ContestPrizeRule[]
  fantasyContests        FantasyContest[]
  fantasyPayments        FantasyPayment[]
  matches                Match[]
  playerStats            PlayerStats[]
  prizeDisbursements     PrizeDisbursement[]
  prizeDistributionRules PrizeDistributionRule[]
  refereeJoinRequests    RefereeJoinRequest[]    @relation("TournamentToRefereeJoinRequests")
  teams                  Team[]
  tournamentAdmin        TournamentAdmin         @relation(fields: [organizerId], references: [id])
  entries                TournamentEntry[]
  invitations            TournamentInvitation[]  @relation("TournamentToInvitations")
  joinRequests           TournamentJoinRequest[] @relation("TournamentToJoinRequests")
  organizers             TournamentOrganizer[]

  @@index([organizerId])
}

model TournamentEntry {
  id            Int           @id @default(autoincrement())
  tournamentId  Int
  playerId      Int
  registeredAt  DateTime      @default(now())
  paymentStatus PaymentStatus @default(PENDING)
  player        Player        @relation(fields: [playerId], references: [id])
  tournament    Tournament    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, playerId])
  @@index([playerId], map: "TournamentEntry_playerId_fkey")
}

model Team {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(255)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tournamentId   Int?
  asTeam1Matches Match[]     @relation("Team1Matches")
  asTeam2Matches Match[]     @relation("Team2Matches")
  wonMatches     Match[]     @relation("WinnerMatches")
  tournament     Tournament? @relation(fields: [tournamentId], references: [id])
  players        Player[]    @relation("PlayerToTeam")

  @@index([tournamentId], map: "Team_tournamentId_fkey")
}

model Match {
  id            Int                 @id @default(autoincrement())
  tournamentId  Int
  refereeId     Int
  player1Id     Int
  player2Id     Int
  player1Score  Int?
  player2Score  Int?
  startTime     DateTime
  endTime       DateTime?
  round         String
  status        MatchStatus
  team1Id       Int?
  team2Id       Int?
  score         String?             @db.VarChar(100)
  winnerId      Int?
  scheduledTime DateTime?
  courtNumber   Int?
  matchDuration Int?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  player1       Player              @relation("Player1", fields: [player1Id], references: [id])
  player2       Player              @relation("Player2", fields: [player2Id], references: [id])
  referee       Referee             @relation(fields: [refereeId], references: [id])
  team1         Team?               @relation("Team1Matches", fields: [team1Id], references: [id])
  team2         Team?               @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament    Tournament          @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  winner        Team?               @relation("WinnerMatches", fields: [winnerId], references: [id])
  performances  MatchPerformance[]
  playerPoints  PlayerMatchPoints[]

  @@index([player1Id], map: "Match_player1Id_fkey")
  @@index([player2Id], map: "Match_player2Id_fkey")
  @@index([refereeId], map: "Match_refereeId_fkey")
  @@index([team1Id], map: "Match_team1Id_fkey")
  @@index([team2Id], map: "Match_team2Id_fkey")
  @@index([tournamentId], map: "Match_tournamentId_fkey")
  @@index([winnerId], map: "Match_winnerId_fkey")
}

model MatchPerformance {
  id           Int      @id @default(autoincrement())
  matchId      Int
  playerId     Int
  points       Int
  aces         Int
  faults       Int
  winningShots Int
  otherStats   Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  match        Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player       Player   @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
  @@index([playerId], map: "MatchPerformance_playerId_fkey")
}

model PlayerStats {
  id                Int         @id @default(autoincrement())
  playerId          Int
  tournamentId      Int?
  wins              Int         @default(0)
  losses            Int         @default(0)
  aces              Int?
  winPercentage     Float?
  pointsScored      Int?
  pointsAgainst     Int?
  tournamentsPlayed Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  player            Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  tournament        Tournament? @relation(fields: [tournamentId], references: [id])

  @@index([playerId], map: "PlayerStats_playerId_fkey")
  @@index([tournamentId], map: "PlayerStats_tournamentId_fkey")
}

model FantasyContest {
  id                  Int                  @id @default(autoincrement())
  name                String
  tournamentId        Int
  entryFee            Float                @default(0)
  prizePool           Float                @default(0)
  maxEntries          Int                  @default(100)
  startDate           DateTime
  endDate             DateTime
  status              FantasyContestStatus @default(OPEN)
  description         String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  adminFee            Float                @default(0)
  entryDeadline       DateTime?
  feePercentage       Float                @default(0)
  isPrizesDistributed Boolean              @default(false)
  isPrizesProcessing  Boolean              @default(false)
  platformFee         Float                @default(0)
  contestPrizeRule    ContestPrizeRule?
  tournament          Tournament           @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  fantasyTeams        FantasyTeam[]
  payments            Payment[]
  prizeDisbursements  PrizeDisbursement[]

  @@index([tournamentId], map: "FantasyContest_tournamentId_fkey")
}

model FantasyTeam {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  contestId          Int
  name               String
  totalPoints        Decimal             @default(0.00) @db.Decimal(10, 2)
  rank               Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  fantasyPayments    FantasyPayment[]
  contest            FantasyContest      @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  players            FantasyTeamPlayer[]
  prizeDisbursements PrizeDisbursement[]

  @@index([contestId], map: "FantasyTeam_contestId_fkey")
  @@index([userId], map: "FantasyTeam_userId_fkey")
}

model FantasyTeamPlayer {
  id            Int         @id @default(autoincrement())
  teamId        Int
  playerId      Int
  isCaptain     Boolean     @default(false)
  isViceCaptain Boolean     @default(false)
  createdAt     DateTime    @default(now())
  player        Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team          FantasyTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, playerId])
  @@index([playerId], map: "FantasyTeamPlayer_playerId_fkey")
}

model PointsSystem {
  id          Int      @id @default(autoincrement())
  action      String
  points      Decimal  @db.Decimal(10, 2)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PlayerMatchPoints {
  id        Int      @id @default(autoincrement())
  playerId  Int
  matchId   Int
  points    Decimal  @default(0.00) @db.Decimal(10, 2)
  breakdown Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, matchId])
  @@index([matchId], map: "PlayerMatchPoints_matchId_fkey")
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  balance   Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          Int               @id @default(autoincrement())
  userId      Int
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  status      TransactionStatus
  referenceId String?
  description String?           @db.Text
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Transaction_userId_fkey")
}

model PaymentMethod {
  id               Int      @id @default(autoincrement())
  userId           Int
  provider         String
  accountReference String
  isDefault        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "PaymentMethod_userId_fkey")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String   @db.Text
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Notification_userId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation("AccountToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation("SessionToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RefereeJoinRequest {
  id           Int               @id @default(autoincrement())
  tournamentId Int
  refereeId    Int
  status       RefereeJoinStatus @default(PENDING)
  message      String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  referee      Referee           @relation("RefereeToRefereeJoinRequests", fields: [refereeId], references: [id])
  tournament   Tournament        @relation("TournamentToRefereeJoinRequests", fields: [tournamentId], references: [id])

  @@index([refereeId], map: "RefereeJoinRequest_refereeId_fkey")
  @@index([tournamentId], map: "RefereeJoinRequest_tournamentId_fkey")
}

model TournamentInvitation {
  id             Int        @id @default(autoincrement())
  tournamentId   Int
  invitedEmail   String
  invitedUserId  Int?
  role           String
  status         String
  invitationCode String     @unique
  message        String?    @db.Text
  expiresAt      DateTime
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  invitedUser    User?      @relation(fields: [invitedUserId], references: [id])
  tournament     Tournament @relation("TournamentToInvitations", fields: [tournamentId], references: [id])

  @@index([tournamentId])
  @@index([invitedUserId])
  @@index([invitationCode])
}

model TournamentJoinRequest {
  id           Int        @id @default(autoincrement())
  tournamentId Int
  userId       Int
  role         String
  status       String
  message      String?    @db.Text
  feedback     String?    @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tournament   Tournament @relation("TournamentToJoinRequests", fields: [tournamentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@index([tournamentId])
  @@index([userId])
}

model PrizeDisbursement {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  contestId      Int
  fantasyTeamId  Int
  userId         Int
  tournamentId   Int?
  amount         Float
  netAmount      Float
  rank           Int
  status         PayoutStatus   @default(PENDING)
  transactionId  String?
  accountId      String?
  paymentDetails Json?
  processingFee  Float          @default(0)
  notes          String?
  contest        FantasyContest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  fantasyTeam    FantasyTeam    @relation(fields: [fantasyTeamId], references: [id], onDelete: Cascade)
  tournament     Tournament?    @relation(fields: [tournamentId], references: [id])
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tournamentId])
  @@index([contestId], map: "PrizeDisbursement_contestId_fkey")
  @@index([fantasyTeamId], map: "PrizeDisbursement_fantasyTeamId_fkey")
  @@index([userId], map: "PrizeDisbursement_userId_fkey")
}

model BankAccount {
  id                    Int      @id @default(autoincrement())
  userId                Int      @unique
  accountHolderName     String
  accountNumber         String
  ifsc                  String
  accountType           String   @default("savings")
  isVerified            Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  razorpayFundAccountId String?
  razorpayContactId     String?
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Payment {
  id                Int             @id @default(autoincrement())
  userId            Int
  amount            Decimal         @db.Decimal(10, 2)
  currency          String          @default("INR")
  status            String          @default("PENDING")
  description       String?
  razorpayOrderId   String?         @unique
  razorpayPaymentId String?         @unique
  razorpaySignature String?
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  fantasyContestId  Int?
  fantasyPayment    FantasyPayment?
  fantasyContest    FantasyContest? @relation(fields: [fantasyContestId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
  paymentSplits     PaymentSplit[]

  @@index([userId])
  @@index([status])
  @@index([razorpayOrderId])
  @@index([razorpayPaymentId])
  @@index([fantasyContestId])
}

model FantasyPayment {
  id             Int          @id @default(autoincrement())
  paymentId      Int          @unique
  fantasyTeamId  Int?
  tournamentId   Int
  entryFee       Decimal      @db.Decimal(10, 2)
  isProcessed    Boolean      @default(false)
  adminSharePaid Boolean      @default(false)
  prizePoolAdded Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  fantasyTeam    FantasyTeam? @relation(fields: [fantasyTeamId], references: [id])
  payment        Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  tournament     Tournament   @relation(fields: [tournamentId], references: [id])

  @@index([fantasyTeamId])
  @@index([tournamentId])
}

model PaymentSplit {
  id                   Int             @id @default(autoincrement())
  paymentId            Int
  tournamentAdminId    Int
  masterAdminId        Int
  tournamentAdminShare Decimal         @db.Decimal(10, 2)
  masterAdminShare     Decimal         @db.Decimal(10, 2)
  prizePoolShare       Decimal         @db.Decimal(10, 2)
  status               String          @default("PENDING")
  processedAt          DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  masterAdmin          User            @relation(fields: [masterAdminId], references: [id])
  payment              Payment         @relation(fields: [paymentId], references: [id])
  tournamentAdmin      TournamentAdmin @relation(fields: [tournamentAdminId], references: [id])

  @@index([paymentId])
  @@index([tournamentAdminId])
  @@index([masterAdminId])
}

model PrizeDistributionRule {
  id                 Int               @id @default(autoincrement())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tournamentId       Int?
  contestPrizeRuleId Int?
  rank               Int
  percentage         Float
  minPlayers         Int               @default(1)
  contestPrizeRule   ContestPrizeRule? @relation(fields: [contestPrizeRuleId], references: [id], onDelete: Cascade)
  tournament         Tournament?       @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@index([contestPrizeRuleId], map: "PrizeDistributionRule_contestPrizeRuleId_fkey")
  @@index([tournamentId], map: "PrizeDistributionRule_tournamentId_fkey")
}

model ContestPrizeRule {
  id                     Int                     @id @default(autoincrement())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  tournamentId           Int
  contestId              Int                     @unique
  contest                FantasyContest          @relation(fields: [contestId], references: [id], onDelete: Cascade)
  tournament             Tournament              @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  prizeDistributionRules PrizeDistributionRule[]

  @@index([tournamentId], map: "ContestPrizeRule_tournamentId_fkey")
}

model TournamentOrganizer {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tournamentId Int
  userId       Int
  role         String     @default("ORGANIZER")
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
  @@index([userId], map: "TournamentOrganizer_userId_fkey")
}

enum TournamentType {
  SINGLES
  DOUBLES
  MIXED_DOUBLES
  ROUND_ROBIN
  KNOCKOUT
  LEAGUE
}

enum TournamentStatus {
  DRAFT
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SkillLevel {
  A_PLUS @map("A+")
  A
  A_MINUS @map("A-")
  B_PLUS @map("B+")
  B
  B_MINUS @map("B-")
  C
  D
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  CONTEST_ENTRY
  CONTEST_WINNINGS
  TOURNAMENT_ENTRY
  PRIZE_MONEY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RefereeJoinStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FantasyContestStatus {
  DRAFT
  OPEN
  CLOSED
  ONGOING
  COMPLETED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
}
