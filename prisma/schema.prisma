datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum Definitions
enum UserRole {
  PLAYER
  REFEREE
  TOURNAMENT_ADMIN
  MASTER_ADMIN
  ORGANIZER
}

enum TournamentType {
  SINGLES
  DOUBLES
  MIXED_DOUBLES
  ROUND_ROBIN
  KNOCKOUT
  LEAGUE
}

enum TournamentStatus {
  DRAFT
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PlayerSkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// User Model (Base for all user types)
model User {
  id               Int             @id @default(autoincrement())
  username         String          @unique @db.VarChar(100)
  email            String          @unique @db.VarChar(255)
  password         String          @db.VarChar(255)
  role             UserRole        @default(PLAYER)
  profile          Profile?
  player           Player?
  referee          Referee?
  tournamentAdmin  TournamentAdmin?
  masterAdmin      MasterAdmin?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// Detailed Profile Model
model Profile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id])
  firstName      String   @db.VarChar(100)
  lastName       String   @db.VarChar(100)
  dateOfBirth    DateTime
  phone          String?  @db.VarChar(20)
  address        String?  @db.Text
  city           String?  @db.VarChar(100)
  country        String?  @db.VarChar(100)
  profilePicture String?  @db.VarChar(255)
}

// Player Model
model Player {
  id                  Int               @id @default(autoincrement())
  userId              Int               @unique
  user                User              @relation(fields: [userId], references: [id])
  skillLevel          PlayerSkillLevel
  ranking             Int
  totalPoints         Int               @default(0)
  tournamentEntries   TournamentEntry[]
  matchPerformances   MatchPerformance[]
  ownedFantasyTeams   FantasyTeam[]     @relation("OwnerFantasyTeams")
  selectedInTeams     FantasyTeam[]     @relation("SelectedPlayersInFantasyTeam")
  teamMemberships     Team[]
}

// Referee Model
model Referee {
  id                 Int        @id @default(autoincrement())
  userId             Int        @unique
  user               User       @relation(fields: [userId], references: [id])
  certificationLevel String     @db.VarChar(100)
  assignedMatches    Match[]
}

// Tournament Admin Model
model TournamentAdmin {
  id             Int           @id @default(autoincrement())
  userId         Int           @unique
  user           User          @relation(fields: [userId], references: [id])
  managedTournaments Tournament[]
}

// Master Admin Model
model MasterAdmin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

// Fantasy Team Model
model FantasyTeam {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(255)
  playerId       Int
  owner          Player    @relation("OwnerFantasyTeams", fields: [playerId], references: [id])
  selectedPlayers Player[] @relation("SelectedPlayersInFantasyTeam")
  totalPoints    Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Tournament Model
model Tournament {
  id                     Int               @id @default(autoincrement())
  name                   String            @db.VarChar(255)
  description            String?           @db.Text
  type                   TournamentType
  status                 TournamentStatus
  startDate              DateTime
  endDate                DateTime
  registrationOpenDate   DateTime
  registrationCloseDate  DateTime
  location               String            @db.VarChar(255)
  maxParticipants        Int
  entryFee               Decimal           @db.Decimal(10, 2)
  prizeMoney             Decimal?          @db.Decimal(10, 2)
  organizerId            Int
  tournamentAdmin        TournamentAdmin   @relation(fields: [organizerId], references: [id])
  entries                TournamentEntry[]
  matches                Match[]
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  @@index([organizerId])
}

// Tournament Entry Model
model TournamentEntry {
  id             Int         @id @default(autoincrement())
  tournamentId   Int
  tournament     Tournament  @relation(fields: [tournamentId], references: [id])
  playerId       Int
  player         Player      @relation(fields: [playerId], references: [id])
  registeredAt   DateTime    @default(now())
  paymentStatus  PaymentStatus @default(PENDING)

  @@unique([tournamentId, playerId])
}

// Match Model
model Match {
  id             Int           @id @default(autoincrement())
  tournamentId   Int
  tournament     Tournament    @relation(fields: [tournamentId], references: [id])
  refereeId      Int
  referee        Referee       @relation(fields: [refereeId], references: [id])
  startTime      DateTime
  endTime        DateTime?
  status         MatchStatus
  team1          Team          @relation("Team1Matches", fields: [team1Id], references: [id])
  team2          Team          @relation("Team2Matches", fields: [team2Id], references: [id])
  team1Id        Int
  team2Id        Int
  score          String?       @db.VarChar(100)
  winner         Team?         @relation("WinnerMatches", fields: [winnerId], references: [id])
  winnerId       Int?
  performances   MatchPerformance[]
}

// Team Model
model Team {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(255)
  players            Player[]
  asTeam1Matches     Match[]   @relation("Team1Matches")
  asTeam2Matches     Match[]   @relation("Team2Matches")
  wonMatches         Match[]   @relation("WinnerMatches")
}

// Match Performance Model
model MatchPerformance {
  id             Int       @id @default(autoincrement())
  matchId        Int
  match          Match     @relation(fields: [matchId], references: [id])
  playerId       Int
  player         Player    @relation(fields: [playerId], references: [id])
  points         Int
  aces           Int
  faults         Int
  winningShots   Int
  otherStats     Json?

  @@unique([matchId, playerId])
}